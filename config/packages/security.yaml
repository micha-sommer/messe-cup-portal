security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Registration
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: login
                check_path: login
#                enable_csrf: true
            logout:
                path: logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            switch_user: { role: ROLE_ADMIN }

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/(%app.supported_locales%)/admin/?$, roles: ROLE_ADMIN }
        - { path: ^/(%app.supported_locales%)/admin/ega/?$, roles: ROLE_ADMIN }
        - { path: ^/(%app.supported_locales%)/admin/messe/?$, roles: ROLE_ADMIN }
        - { path: ^/(%app.supported_locales%)/invoice/\d+/?$, roles: ROLE_USER }
        - { path: ^/(%app.supported_locales%)/invoice/\d+/mail/?$, roles: ROLE_USER }
        - { path: ^/(%app.supported_locales%)/contestants/ega/female/edit/?$, roles: ROLE_USER }
        - { path: ^/(%app.supported_locales%)/contestants/ega/male/edit/?$, roles: ROLE_USER }
        - { path: ^/(%app.supported_locales%)/contestants/messe/female/edit/?$, roles: ROLE_USER }
        - { path: ^/(%app.supported_locales%)/contestants/messe/male/edit/?$, roles: ROLE_USER }
        - { path: ^/(%app.supported_locales%)/registration/\d+/?$, methods: POST, roles: ROLE_USER }
        - { path: ^/(%app.supported_locales%)/registration/new/?$, roles: PUBLIC_ACCESS }
        - { path: ^/(%app.supported_locales%)/registration/edit/?$, roles: ROLE_USER }
        - { path: ^/(%app.supported_locales%)/registration/edit/password/?$, roles: ROLE_USER }
        - { path: ^/(%app.supported_locales%)/welcome/?$, roles: PUBLIC_ACCESS }
        - { path: ^/(%app.supported_locales%)/?$, roles: PUBLIC_ACCESS }
        - { path: ^/(%app.supported_locales%)/login/?$, roles: PUBLIC_ACCESS }
        - { path: ^/logout/?$, roles: PUBLIC_ACCESS }
        - { path: ^/$, roles: PUBLIC_ACCESS }
        - { path: ^/, roles: ROLE_NOBODY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
